montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
set.seed(seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed
montydoor(100, FALSE, seed
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor <- function(n, switch, seed){
set.seed(seednr)
wins <- 0
for (i in 1:n){
winning_door <- sample(c(1,2,3), 1, replace = TRUE)
chosen_door <- sample(c(1,2,3), 1, replace = TRUE)
if ((winning_door == chosen_door)&(switch == FALSE)){
wins <- wins + 1
}
if (!(winning_door == chosen_door) & (switch == TRUE)){
wins <- wins + 1
}
}
return (wins/n)
}
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor <- function(n, switch, seednr){
set.seed(seednr)
wins <- 0
for (i in 1:n){
winning_door <- sample(c(1,2,3), 1, replace = TRUE)
chosen_door <- sample(c(1,2,3), 1, replace = TRUE)
if ((winning_door == chosen_door)&(switch == FALSE)){
wins <- wins + 1
}
if (!(winning_door == chosen_door) & (switch == TRUE)){
wins <- wins + 1
}
}
return (wins/n)
}
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
montydoor(100, FALSE, seed)
coinflip_alternative <- function(n, seednr){
set.seed(seednr)
freq_nrhead <- 0
flips <- sample(c(0,1), n, replace = TRUE)
for (i in flips){
if (i==1){
freq_nrhead <- freq_nrhead + 1
}
}
return (freq_nrhead/n)
}
coinflip <- function(n, seednr){
set.seed(seednr)
freq_nrhead <- 0
for (val in 1:n){
outcome <- sample(c(0,1), 1, replace = TRUE)
if (outcome == 1){
freq_nrhead = freq_nrhead + 1
}
}
prob = freq_nrhead/n
return (prob)
}
seed <- 23555
1:365
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
print(birthdays)
}
}
birthday(20, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
type(birthdays)
}
}
birthday(20, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
class(birthdays)
}
}
birthday(20, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
print(class(birthdays))
}
}
birthday(20, 10^5)
print(typeof(birthdays))
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
print(typeof(birthdays))
}
}
birthday(20, 10^5)
test <- sample((1:365), 20, replace = TRUE)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (birthdays == unique(birthdays)){
sameday <- sameday + 1
}
}
return (sameday/n)
}
birthday(20, 10^5)
warnings()
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (setequal(birthdays,unique(birthdays))){
sameday <- sameday + 1
}
}
return (sameday/n)
}
birthday(20, 10^5)
test1 <- c(1,2,3)
test2 <- c(1,2,3,1)
test1==test2
setequal(test1,unique(test2))
setequal(test1,test2)
setequal(test2, unique(test2))
unique(test2)
duplicated(test2)
any(duplicated(test2))
!any(duplicated(test2))
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (any(duplicated(birthdays))){
sameday <- sameday + 1
}
}
print(sameday)
return (sameday/n)
}
birthday(20, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (any(duplicated(birthdays))){
sameday <- sameday + 1
}
}
return (sameday/n)
}
birthday(2, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (any(duplicated(birthdays))){
sameday <- sameday + 1
}
}
return (sameday/n)
}
birthday(40, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (any(duplicated(birthdays))){
sameday <- sameday + 1
}
}
return (sameday/n)
}
birthday(40, 10^5)
birthday <- function(students, n){
sameday <- 0
for (i in 1:n){
birthdays <- sample((1:365), students, replace = TRUE)
if (any(duplicated(birthdays))){
sameday <- sameday + 1
}
}
return (sameday/n)
}
birthday(40, 10^5)
birthday(23, 10^5)
tea_tasting()
#' Variance Estimators
#'
#' @param M - Mean - Population Mean
#' @param V - Variance - Population Variance
#' @param N - Sample Size - Size of each sample
#' @param I - Iterations - Nr. of iterations completed
#'
#' @return
varianceestimators <- function(M, V, N, I){
m <- matrix(NA, I, 3)
colnames(m) <- c("UNB", "MLE", "MINmse")
for (i in 1:I){
x <- rnorm(N, M, sqrt(V))
var_unb <- var(x)
var_maxlike <- var_unb * ((N-1)/1) * (1/N)
var_minmse <- var_unb * ((N-1)/1) * (1/(N+1))
m[i,] <- c(var_unb, var_maxlike, var_minmse)
}
outcomes <- matrix(NA, 4, 3)
outcomes[1,] <- colMeans(m)
outcomes[2,] <- colMeans(m)-5
outcomes[3,] <- apply(m,2,var)
outcomes[4,] <- apply(m,2,function(x){mean((x-5)^2)})
colnames(outcomes) <- c("UNB", "MLE", "MINmse")
rownames(outcomes) <- c("Mean", "Bias", "Variance", "MSE")
return (outcomes)
}
#Conducting the experiments
set.seed(12052022) # Setting the seed for reproducability
matrixoutcomes <- varianceestimators(0,5,20,10000)
# Exporting the table to a word document
matrixoutcomes <- as.data.frame((matrixoutcomes))
print(matrixoutcomes)
library(rempsyc)
table <- nice_table(matrixoutcomes)
save_as_docx(table, path="TableQ2_200.docx")
#' Variance Estimators
#'
#' @param M - Mean - Population Mean
#' @param V - Variance - Population Variance
#' @param N - Sample Size - Size of each sample
#' @param I - Iterations - Nr. of iterations completed
#'
#' @return
varianceestimators <- function(M, V, N, I){
m <- matrix(NA, I, 3)
colnames(m) <- c("UNB", "MLE", "MINmse")
for (i in 1:I){
x <- rnorm(N, M, sqrt(V))
var_unb <- var(x)
var_maxlike <- var_unb * ((N-1)/1) * (1/N)
var_minmse <- var_unb * ((N-1)/1) * (1/(N+1))
m[i,] <- c(var_unb, var_maxlike, var_minmse)
}
outcomes <- matrix(NA, 4, 3)
outcomes[1,] <- colMeans(m)
outcomes[2,] <- colMeans(m)-5
outcomes[3,] <- apply(m,2,var)
outcomes[4,] <- apply(m,2,function(x){mean((x-5)^2)})
colnames(outcomes) <- c("UNB", "MLE", "MINmse")
rownames(outcomes) <- c("Mean", "Bias", "Variance", "MSE")
return (outcomes)
}
#Conducting the experiments
set.seed(12052022) # Setting the seed for reproducability
matrixoutcomes <- varianceestimators(0,5,3,1)
# Exporting the table to a word document
matrixoutcomes <- as.data.frame((matrixoutcomes))
print(matrixoutcomes)
# library(rempsyc)
# table <- nice_table(matrixoutcomes)
# save_as_docx(table, path="TableQ2_200.docx")
#' Variance Estimators
#'
#' @param M - Mean - Population Mean
#' @param V - Variance - Population Variance
#' @param N - Sample Size - Size of each sample
#' @param I - Iterations - Nr. of iterations completed
#'
#' @return
varianceestimators <- function(M, V, N, I){
m <- matrix(NA, I, 3)
colnames(m) <- c("UNB", "MLE", "MINmse")
for (i in 1:I){
x <- rnorm(N, M, sqrt(V))
var_unb <- var(x)
var_maxlike <- var_unb * ((N-1)/1) * (1/N)
var_minmse <- var_unb * ((N-1)/1) * (1/(N+1))
m[i,] <- c(var_unb, var_maxlike, var_minmse)
}
outcomes <- matrix(NA, 4, 3)
outcomes[1,] <- colMeans(m)
outcomes[2,] <- colMeans(m)-5
outcomes[3,] <- apply(m,2,var)
outcomes[4,] <- apply(m,2,function(x){mean((x-5)^2)})
colnames(outcomes) <- c("UNB", "MLE", "MINmse")
rownames(outcomes) <- c("Mean", "Bias", "Variance", "MSE")
return (outcomes)
}
#Conducting the experiments
set.seed(12052022) # Setting the seed for reproducability
matrixoutcomes <- varianceestimators(0,5,3,10000)
# Exporting the table to a word document
matrixoutcomes <- as.data.frame((matrixoutcomes))
print(matrixoutcomes)
# library(rempsyc)
# table <- nice_table(matrixoutcomes)
# save_as_docx(table, path="TableQ2_200.docx")
#' Variance Estimators
#'
#' @param M - Mean - Population Mean
#' @param V - Variance - Population Variance
#' @param N - Sample Size - Size of each sample
#' @param I - Iterations - Nr. of iterations completed
#'
#' @return
varianceestimators <- function(M, V, N, I){
m <- matrix(NA, I, 3)
colnames(m) <- c("UNB", "MLE", "MINmse")
for (i in 1:I){
x <- rnorm(N, M, sqrt(V))
var_unb <- var(x)
var_maxlike <- var_unb * ((N-1)/1) * (1/N)
var_minmse <- var_unb * ((N-1)/1) * (1/(N+1))
m[i,] <- c(var_unb, var_maxlike, var_minmse)
}
outcomes <- matrix(NA, 4, 3)
outcomes[1,] <- colMeans(m)
outcomes[2,] <- colMeans(m)-5
outcomes[3,] <- apply(m,2,var)
outcomes[4,] <- apply(m,2,function(x){mean((x-5)^2)})
colnames(outcomes) <- c("UNB", "MLE", "MINmse")
rownames(outcomes) <- c("Mean", "Bias", "Variance", "MSE")
return (outcomes)
}
#Conducting the experiments
set.seed(12052022) # Setting the seed for reproducability
matrixoutcomes <- varianceestimators(0,5,20,10000)
# Exporting the table to a word document
matrixoutcomes <- as.data.frame((matrixoutcomes))
print(matrixoutcomes)
# library(rempsyc)
# table <- nice_table(matrixoutcomes)
# save_as_docx(table, path="TableQ2_200.docx")
#' Variance Estimators
#'
#' @param M - Mean - Population Mean
#' @param V - Variance - Population Variance
#' @param N - Sample Size - Size of each sample
#' @param I - Iterations - Nr. of iterations completed
#'
#' @return
varianceestimators <- function(M, V, N, I){
m <- matrix(NA, I, 3)
colnames(m) <- c("UNB", "MLE", "MINmse")
for (i in 1:I){
x <- rnorm(N, M, sqrt(V))
var_unb <- var(x)
var_maxlike <- var_unb * ((N-1)/1) * (1/N)
var_minmse <- var_unb * ((N-1)/1) * (1/(N+1))
m[i,] <- c(var_unb, var_maxlike, var_minmse)
}
outcomes <- matrix(NA, 4, 3)
outcomes[1,] <- colMeans(m)
outcomes[2,] <- colMeans(m)-5
outcomes[3,] <- apply(m,2,var)
outcomes[4,] <- apply(m,2,function(x){mean((x-5)^2)})
colnames(outcomes) <- c("UNB", "MLE", "MINmse")
rownames(outcomes) <- c("Mean", "Bias", "Variance", "MSE")
return (outcomes)
}
#Conducting the experiments
set.seed(12052022) # Setting the seed for reproducability
matrixoutcomes <- varianceestimators(0,5,200,10000)
# Exporting the table to a word document
matrixoutcomes <- as.data.frame((matrixoutcomes))
print(matrixoutcomes)
# library(rempsyc)
# table <- nice_table(matrixoutcomes)
# save_as_docx(table, path="TableQ2_200.docx")
#' Variance Estimators
#'
#' @param M - Mean - Population Mean
#' @param V - Variance - Population Variance
#' @param N - Sample Size - Size of each sample
#' @param I - Iterations - Nr. of iterations completed
#'
#' @return
varianceestimators <- function(M, V, N, I){
m <- matrix(NA, I, 3)
colnames(m) <- c("UNB", "MLE", "MINmse")
for (i in 1:I){
x <- rnorm(N, M, sqrt(V))
var_unb <- var(x)
var_maxlike <- var_unb * ((N-1)/1) * (1/N)
var_minmse <- var_unb * ((N-1)/1) * (1/(N+1))
m[i,] <- c(var_unb, var_maxlike, var_minmse)
}
outcomes <- matrix(NA, 4, 3)
outcomes[1,] <- colMeans(m)
outcomes[2,] <- colMeans(m)-5
outcomes[3,] <- apply(m,2,var)
outcomes[4,] <- apply(m,2,function(x){mean((x-5)^2)})
colnames(outcomes) <- c("UNB", "MLE", "MINmse")
rownames(outcomes) <- c("Mean", "Bias", "Variance", "MSE")
return (outcomes)
}
#Conducting the experiments
set.seed(12052022) # Setting the seed for reproducability
matrixoutcomes <- varianceestimators(0,5,3,10000)
write.table(matrixoutcomes, "test4.csv")
# Exporting the table to a word document
#matrixoutcomes <- as.data.frame((matrixoutcomes))
#print(matrixoutcomes)
# library(rempsyc)
# table <- nice_table(matrixoutcomes)
# save_as_docx(table, path="TableQ2_200.docx")
source("C:/Users/niels/Desktop/Master/Computational statistics/assignments/Assignment 1 Final/Assignment 1 - question 2 final code.R", echo=TRUE)
VetSuicides_2005 <- read.csv("C:/Users/niels/Desktop/Master/Computational statistics/assignments/Assignment 2/VetSuicides_2005.csv", stringsAsFactors=TRUE)
View(VetSuicides_2005)
VetSuicides_2011 <- read.csv("C:/Users/niels/Desktop/Master/Computational statistics/assignments/Assignment 2/VetSuicides_2011.csv", stringsAsFactors=TRUE)
View(VetSuicides_2011)
View(VetSuicides_2005)
dfvet <- merge(VetSuicides_2005, VetSuicides_2011$vet_rate, by = state)
dfvet <- merge(VetSuicides_2005, VetSuicides_2011$vet_rate, by = "state")
dfvet <- merge(VetSuicides_2005, VetSuicides_2011, by = "state")
View(dfvet)
View(VetSuicides_2005)
appendicitis <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/appendicitis.csv")
View(appendicitis)
table(appendicitis$class)
echocardiogram <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/echocardiogram.csv")
View(echocardiogram)
table(echocardiogram$class)
setwd("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets")
ecoli <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/ecoli.csv")
View(ecoli)
table(ecoli$class)
count(table(ecoli$class))
len(table(ecoli$class))
length(table(ecoli$class))
glass <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/glass.csv")
View(glass)
length(table(glass$class))
hayes.roth <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/hayes-roth.csv")
View(hayes.roth)
length(table(hayes.roth$class))
heart.statlog <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/heart-statlog.csv")
View(heart.statlog)
length(table(heart.statlog$class))
iris <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/iris.csv")
View(iris)
length(table(iris$class))
liver.disorders <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/liver-disorders.csv")
View(liver.disorders)
length(table(liver.disorders$class))
new.thyroid <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/new-thyroid.csv")
View(new.thyroid)
length(table(new.thyroid$class))
pima <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/pima.csv")
View(pima)
length(table(pima$class))
saheart <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/saheart.csv")
View(saheart)
length(table(saheart$class))
vehicle <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/vehicle.csv")
View(vehicle)
length(table(vehicle$class))
vertebra.column.2c <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/vertebra-column-2c.csv")
View(vertebra.column.2c)
length(table(vertebra.column.2c$class))
wine.quality.red <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/wine-quality-red.csv")
View(wine.quality.red)
length(table(wine.quality.red$class))
length(table(wine.quality.red$class))
yeast <- read.csv("C:/Users/niels/Desktop/Master/block 1/Data Mining for business and gov/exctracurricular project/Datasets/yeast.csv")
View(yeast)
length(table(yeast$class))
